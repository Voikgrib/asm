Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 1
asciitr.asm



      1				     ;---------------------------------------------------------------------;
      2				     ;			 Create	ramka on screen
      3				     ;
      4				     ;---------------------------------------------------------------------;
      5
      6	0000			     .model tiny
      7	0000			     .code
      8
      9				     org 100h
     10
     11	0100			     Start:
     12	0100  E9 01C6		     jmp Main					     ; Inache ne compilit
     13
     14	      =050A		     L_U_CORNER	     = 160 * 8 + 10
     15	      =0018		     LENGH	     = 18h
     16	      =0007		     HIGH	     = 7h
*Warning* asciitr.asm(16) Reserved word	used as	symbol:	HIGH
     17	      =B800		     VIDEOSEG	     = 0b800h
     18
     19	      =00C9		     YGOL_1	     = 0c9h			     ; Left Up corner
     20	      =00C8		     YGOL_2	     = 0c8h			     ; Left Down corner
     21	      =00BB		     YGOL_3	     = 0bbh			     ; Right Up	corner
     22	      =00BC		     YGOL_4	     = 0bch			     ; Right Down corner
     23	      =00BA		     STENA	     = 0bah			     ; Wall
     24	      =00CD		     POL	     = 0cdh			     ; pol/potolok
     25	      =004E		     COLOR	     = 4eh			     ; color of	all
     26
     27				     ;=================== RAMKA	PRINT DECLARE ==============================
     28
     29	0103			     RamkaPrint	proc				     ; Print ramka
     30	0103  BB 050A				     mov bx, L_U_CORNER
     31	0106  26: C7 07	00C9			     mov es:[bx], YGOL_1
*Warning* asciitr.asm(31) Argument needs type override
     32	010B  26: C7 47	01 004E			     mov es:[bx+1], COLOR	     ; Print first ygol
*Warning* asciitr.asm(32) Argument needs type override
     33	0111  83 C3 02				     add bx, 2
     34
     35	0114  B9 053A				     mov cx, L_U_CORNER	+ LENGH	+ LENGH
     36
     37	0117  26: C7 07	00CD	     Fir_line:	     mov es:[bx], pol		     ; while(not sentr line)
*Warning* asciitr.asm(37) Argument needs type override
     38	011C  26: C7 47	01 004E			     mov es:[bx+1], COLOR	     ; printf("=")
*Warning* asciitr.asm(38) Argument needs type override
     39	0122  83 C3 02				     add bx, 2			     ; bx = bx + 2
     40
     41	0125  3B D9				     cmp bx, cx
     42	0127  75 EE				     jne Fir_line	     ; while end
     43
     44	0129  26: C7 07	00BB			     mov es:[bx], YGOL_3
*Warning* asciitr.asm(44) Argument needs type override
     45	012E  26: C7 47	01 004E			     mov es:[bx+1], COLOR
*Warning* asciitr.asm(45) Argument needs type override
     46
     47
     48	0134  81 C3 00A0	     New_line:	     add bx, 160
     49	0138  8B D3				     mov dx, bx			     ; dx = end	of new line
     50	013A  83 EB 30				     sub bx, LENGH + LENGH	     ; bx = start of new line
Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 2
asciitr.asm



     51	013D  26: C7 07	00BA			     mov es:[bx], STENA
*Warning* asciitr.asm(51) Argument needs type override
     52	0142  26: C7 47	01 004E			     mov es:[bx	+ 1], COLOR	     ; set left	wall
*Warning* asciitr.asm(52) Argument needs type override
     53
     54	0148  83 C3 02		     Sentr_line:     add bx, 2
     55	014B  3B DA				     cmp bx, dx
     56	014D  75 F9				     jne Sentr_line
     57	014F  26: C7 07	00BA			     mov es:[bx], STENA		     ; +---------------------+
*Warning* asciitr.asm(57) Argument needs type override
     58	0154  26: C7 47	01 004E			     mov es:[bx	+ 1], COLOR	     ; | print walls	     |
*Warning* asciitr.asm(58) Argument needs type override
     59										     ; | using si position   |
     60	015A  3B DE				     cmp bx, si			     ; | as end		     |
     61	015C  74 02				     je	End_line_st		     ; +---------------------+
     62	015E  EB D4				     jmp New_line
     63
     64	0160  83 EB 30		     End_line_st:    sub bx, LENGH + LENGH
     65
     66	0163  26: C7 07	00C8			     mov es:[bx], YGOL_2
*Warning* asciitr.asm(66) Argument needs type override
     67	0168  26: C7 47	01 004E			     mov es:[bx	+ 1], COLOR
*Warning* asciitr.asm(67) Argument needs type override
     68	016E  83 C3 02				     add bx, 2
     69
     70	0171  26: C7 07	00CD	     End_line:	     mov es:[bx], POL
*Warning* asciitr.asm(70) Argument needs type override
     71	0176  26: C7 47	01 004E			     mov es:[bx+1], COLOR
*Warning* asciitr.asm(71) Argument needs type override
     72	017C  83 C3 02				     add bx, 2
     73	017F  3B DE				     cmp bx, si
     74	0181  75 EE				     jne End_line
     75
     76	0183  26: C7 07	00BC			     mov es:[bx], YGOL_4
*Warning* asciitr.asm(76) Argument needs type override
     77	0188  26: C7 47	01 004E			     mov es:[bx+1], COLOR
*Warning* asciitr.asm(77) Argument needs type override
     78
     79	018E  C3				     ret
     80	018F			     RamkaPrint	endp
     81
     82				     ;========================== PRINT DECLARE ==============================
     83
     84	018F			     Printer proc
     85	018F  8B CB				     mov cx, bx
     86	0191  8A 04		     Next:	     mov al, [si]		     ; al = si*
     87	0193  46				     inc si			     ; si++
     88
     89	0194  3C 24				     cmp al, '$'		     ; if(al ==	'$')
     90	0196  74 13				     je	End_t			     ;	 jump End_t
     91
     92	0198  26: 88 07				     mov es:[bx], al		     ; Text[bx]	= cur_sym
     93	019B  26: C7 47	01 004E			     mov es:[bx+1], 4eh		     ; Y on B
*Warning* asciitr.asm(93) Argument needs type override
     94	01A1  8A D0				     mov dl, al			     ; save al
     95
     96	01A3  83 C3 02				     add bx, 2
Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 3
asciitr.asm



     97
     98	01A6  80 FA 24				     cmp dl, '$'
     99	01A9  75 E6				     jne Next			     ; while end
    100
    101	01AB  C3		     End_t:	     ret
    102	01AC			     Printer endp
    103
    104				     ;======================== ascii --> h DECLARE (mem_1 = accii) ==============
    105
    106	01AC			     H_create proc
    107	01AC  33 F6				     xor si, si
    108	01AE			     H_start:
    109	01AE  83 C3 02				     add bx, 2			     ; bx = bx + 2
    110	01B1  33 D2				     xor dx, dx			     ; dx = 0
    111	01B3  80 CA F0				     or	dl, 11110000b		     ; -2 chasa	zisny na otladky
    112	01B6  22 16 039Cr			     and dl, [mem_1]		     ; get last	4 bits from mem_1
    113	01BA  D0 26 039Cr D0 26	  +		     shl [mem_1], 4h		     ; move to next 4 bits in mem_1
    114	      039Cr D0 26 039Cr	D0+
    115	      26 039Cr
    116	01CA  D0 EA D0 EA D0 EA	D0+		     shr dl, 4h			     ; dl looks	like "0000 xxxx"
    117	      EA
    118	01D2  80 FA 0A				     cmp dl, 0ah		     ; is num or letter?
    119	01D5  72 12				     jb	H_num
    120
    121	01D7  80 C2 41				     add dl, 'A'		     ; if dl >=	10
    122	01DA  80 EA 0A				     sub dl, 0ah
    123	01DD  26: 88 17				     mov es:[bx], dl		     ; is letter
    124	01E0  26: C7 47	01 004E			     mov es:[bx+1], COLOR
*Warning* asciitr.asm(121) Argument needs type override
    125	01E6  EB 0D 90				     jmp H_end
    126
    127	01E9  80 C2 30		     H_num:	     add dl, '0'		     ; if dl < 10
    128	01EC  26: 88 17				     mov es:[bx], dl		     ; is num
    129	01EF  26: C7 47	01 004E			     mov es:[bx+1], COLOR
*Warning* asciitr.asm(126) Argument needs type override
    130
    131	01F5			     H_end:
    132	01F5  83 C6 01				     add si, 1
    133	01F8  83 FE 02				     cmp si, 2
    134	01FB  75 B1				     jne H_start
    135
    136	01FD  A0 039Dr				     mov al, [mem_2]
    137	0200  A2 039Cr				     mov [mem_1], al
    138
    139	0203  C3				     ret
    140	0204			     H_create endp
    141
    142				     ;====================== ascii --> 8-razr (mem_1 = symbol) ===============
    143
    144	0204			     E_create proc
    145	0204  33 F6				     xor si, si
    146
    147	0206  83 C3 02		     E_start:	     add bx, 2
    148	0209  33 C0				     xor ax, ax
    149	020B  33 D2				     xor dx, dx
    150
    151	020D  83 FE 00				     cmp si, 0
Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 4
asciitr.asm



    152	0210  74 20				     je	E_fir
    153	0212  80 CA E0				     or	dl, 11100000b
    154	0215  22 16 039Cr			     and dl, [mem_1]
    155	0219  D0 EA D0 EA D0 EA	D0+		     shr dl, 5h
    156	      EA D0 EA
    157	0223  D0 26 039Cr D0 26	  +		     shl [mem_1], 3h		     ; Pick 3 bits
    158	      039Cr D0 26 039Cr
    159	022F  EB 1C 90				     jmp E_calc
    160
    161	0232  80 CA C0		     E_fir:	     or	dl, 11000000b
    162	0235  22 16 039Cr			     and dl, [mem_1]
    163	0239  D0 EA D0 EA D0 EA	D0+		     shr dl, 6h
    164	      EA D0 EA D0 EA
    165	0245  D0 26 039Cr D0 26	  +		     shl [mem_1], 2h		     ; Pick 2 left bits
    166	      039Cr
    167
    168	024D			     E_calc:
    169	024D  80 C2 30				     add dl, 30h
    170	0250  26: 88 17				     mov es:[bx], dl
    171	0253  26: C7 47	01 004E			     mov es:[bx+1], COLOR	     ; printer
*Warning* asciitr.asm(164) Argument needs type override
    172
    173	0259  83 C6 01				     add si, 1
    174	025C  83 FE 03				     cmp si, 3
    175	025F  75 A5				     jne E_start		     ; -2 hour of my life
    176
    177	0261  A0 039Dr				     mov al, [mem_2]
    178	0264  A2 039Cr				     mov [mem_1], al		     ; refresh mem_1
    179
    180	0267  C3				     ret
    181	0268			     E_create endp
    182
    183				     ;=========================	ascii --> binary =============================
    184
    185	0268			     B_create proc
    186	0268  33 F6				     xor si, si
    187
    188	026A  83 C3 02		     B_start:	     add bx, 2
    189	026D  33 D2				     xor dx, dx
    190	026F  80 CA 80				     or	dl, 10000000b
    191	0272  22 16 039Cr			     and dl, [mem_1]
    192	0276  D0 EA D0 EA D0 EA	D0+		     shr dl, 7h
    193	      EA D0 EA D0 EA D0	EA
    194	0284  D0 26 039Cr			     shl [mem_1], 1h		     ; Get the leftest bit
    195
    196	0288  80 C2 30				     add dl, '0'
    197	028B  26: 88 17				     mov es:[bx], dl
    198	028E  26: C7 47	01 004E			     mov es:[bx	+ 1], COLOR	     ; print it
*Warning* asciitr.asm(190) Argument needs type override
    199
    200	0294  83 C6 01				     add si, 1
    201	0297  83 FE 08				     cmp si, 8h			     ; do it again
    202	029A  75 CE				     jne B_start
    203
    204	029C  A0 039Dr				     mov al, [mem_2]		     ; -10 min of my life
    205	029F  A2 039Cr				     mov [mem_1], al		     ; :)
    206
Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 5
asciitr.asm



    207	02A2  C3				     ret
    208	02A3			     B_create endp
    209
    210				     ;====================== ascii --> 10-razr ===============================
    211
    212	02A3			     T_create proc
    213	02A3  33 C0				     xor ax, ax
    214	02A5  B2 0A				     mov dl, 0ah
    215	02A7  A0 039Cr				     mov al, [mem_1]		     ; Get symbol
    216	02AA  83 C3 06				     add bx, 6
    217
    218	02AD  83 EB 02		     T_start:	     sub bx, 2
    219	02B0  F6 F2				     div dl			     ; Get fir cifra
    220	02B2  8A F4				     mov dh, ah
    221
    222	02B4  3C 00				     cmp al, 0h			     ; if end of num
    223	02B6  74 0A				     je	T_end			     ; break
    224
    225	02B8  80 C4 30				     add ah, 30h
    226	02BB  26: 88 27				     mov es:[bx], ah
    227				     ;		     mov es:[bx	+ 1], COLOR	     ; printf
    228
    229	02BE  32 E4				     xor ah, ah
    230	02C0  EB EB				     jmp T_start
    231
    232	02C2  80 C4 30		     T_end:	     add ah, 30h
    233	02C5  26: 88 27				     mov es:[bx], ah		     ; print ostatok
    234				     ;		     mov es:[bx+1], COLOR
    235
    236	02C8  C3				     ret
    237	02C9			     T_create endp
    238
    239				     ;========================================================================
    240				     ;=========================== MAIN START =================================
    241				     ;========================================================================
    242
    243	02C9			     Main:
    244	02C9  B8 B800				     mov ax, VIDEOSEG		     ;
    245	02CC  8E C0				     mov es, ax			     ; es = VIDEOSEG
    246	02CE  BB 050A				     mov bx, L_U_CORNER		     ; bx = senter
    247	02D1  BA 0000				     mov dx, 0h			     ; dl = 0
    248	02D4  BE 053A				     mov si, L_U_CORNER	+ LENGH	* 2  ; si = end	of cur line
    249
    250										     ; printf ramka
    251	02D7  B8 0020		     Line:	     mov ax, ' '		     ; al = ' '
    252	02DA  26: 88 07				     mov es:[bx], al		     ; place ramka
    253	02DD  26: C7 47	01 004E			     mov es:[bx+1], 4eh		     ; red backgrownd
*Warning* asciitr.asm(245) Argument needs type override
    254
    255	02E3  83 C3 02				     add bx, 2			     ; bx = bx + 2
    256
    257	02E6  3B DE				     cmp bx, si			     ; while end Line
    258	02E8  75 ED				     jne Line
    259
    260	02EA  81 C6 00A0			     add si, 0a0h		     ; si = si + 160
    261	02EE  8B C6				     mov ax, si			     ;
    262	02F0  2D 0030				     sub ax, LENGH * 2		     ;
Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 6
asciitr.asm



    263	02F3  8B D8				     mov bx, ax			     ; move on L_U_CORNER
    264
    265	02F5  83 FA 07				     cmp dx, HIGH
    266	02F8  74 07				     je	Getch
    267
    268	02FA  83 C2 01				     add dx, 1			     ; dx++
    269
    270	02FD  3B DE				     cmp bx, si
    271	02FF  75 D6				     jne Line			     ; while in	colums
    272
    273				     ;======================= ASCII GET	======================================
    274
    275	0301  32 E4		     Getch:	     xor ah, ah			     ; ax = 0
    276	0303  B0 01				     mov al, 1h
    277	0305  CD 16				     int 16h			     ; ah = getch()
    278	0307  A2 039Cr				     mov [mem_1], al
    279	030A  A2 039Dr				     mov [mem_2], al
    280
    281	030D  26: A2 0148			     mov es:[328], al
    282	0311  26: C7 06	0149 000E		     mov es:[329], 0eh			     ; DEBUG
*Warning* asciitr.asm(274) Argument needs type override
    283
    284				     ;============================= RAMKA PRINT	(si = end) ===================
    285	0318			     Ramka:
    286	0318  E8 FDE8				     call RamkaPrint		     ; si = END!
    287
    288				     ;==================== LINE	PRINT (bx = start pos, si &line) =============
    289
    290	031B  BE 0368r		     Text:	     mov si, offset meow	     ; si = &meow
    291	031E  BB 05AC				     mov bx, L_U_CORNER	+ 162
    292	0321  E8 FE6B				     call Printer		     ; print(meow)
    293
    294	0324  8B D9				     mov bx, cx
    295	0326  81 C3 00A0			     add bx, 0a0h
    296	032A  BE 0372r				     mov si, offset info_h
    297	032D  E8 FE5F				     call Printer		     ; print 16razr
    298	0330  E8 FE79				     call H_create
    299
    300	0333  8B D9				     mov bx, cx
    301	0335  81 C3 00A0			     add bx, 0a0h
    302	0339  BE 037Dr				     mov si, offset info_e
    303	033C  E8 FE50				     call Printer		     ; print 8razr
    304	033F  E8 FEC2				     call E_create		     ; // Byaka
    305
    306	0342  8B D9				     mov bx, cx
    307	0344  81 C3 00A0			     add bx, 0a0h
    308	0348  BE 0387r				     mov si, offset info_b
    309	034B  E8 FE41				     call Printer		     ; print 2razr
    310	034E  E8 FF17				     call B_create
    311
    312	0351  8B D9				     mov bx, cx
    313	0353  81 C3 00A0			     add bx, 0a0h
    314	0357  BE 0391r				     mov si, offset info_t
    315	035A  E8 FE32				     call Printer		     ; print 10razr
    316	035D  E8 FF43				     call T_create
    317
    318				     ;========================================================================
Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 7
asciitr.asm



    319
    320	0360  B8 4C00				     mov ax, 4c00h		     ; exit(0)
    321	0363  CD 21				     int 21h
    322
    323	0365  EB 37 90				     jmp Mem_end
    324	0368  49 20 03 20 63 61	74+  meow	     db	     'I	', 03h,	' cats!$'
    325	      73 21 24
    326	0372  31 36 2D 72 69 63	68+  info_h	     db	     '16-rich =	$'
    327	      20 3D 20 24
    328	037D  38 2D 72 69 63 68	20+  info_e	     db	     '8-rich = $'
    329	      3D 20 24
    330	0387  62 69 6E 61 72 79	20+  info_b	     db	     'binary = $'
    331	      3D 20 24
    332	0391  31 30 2D 72 69 63	68+  info_t	     db	     '10-rich =	$'
    333	      20 3D 20 24
    334	039C  00		     mem_1	     db	     0
    335	039D  00		     mem_2	     db	     0
    336
    337	039E			     Mem_end:
    338
    339				     end Start
Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 8
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "02/23/18"
??FILENAME			  Text	 "asciitr "
??TIME				  Text	 "19:41:20"
??VERSION			  Number 040A
@32BIT				  Text	 0
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0101H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 ASCIITR
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
B_CREATE			  Near	 DGROUP:0268
B_START				  Near	 DGROUP:026A
COLOR				  Number 004E
END_LINE			  Near	 DGROUP:0171
END_LINE_ST			  Near	 DGROUP:0160
END_T				  Near	 DGROUP:01AB
E_CALC				  Near	 DGROUP:024D
E_CREATE			  Near	 DGROUP:0204
E_FIR				  Near	 DGROUP:0232
E_START				  Near	 DGROUP:0206
FIR_LINE			  Near	 DGROUP:0117
GETCH				  Near	 DGROUP:0301
HIGH				  Number 0007
H_CREATE			  Near	 DGROUP:01AC
H_END				  Near	 DGROUP:01F5
H_NUM				  Near	 DGROUP:01E9
H_START				  Near	 DGROUP:01AE
INFO_B				  Byte	 DGROUP:0387
INFO_E				  Byte	 DGROUP:037D
INFO_H				  Byte	 DGROUP:0372
INFO_T				  Byte	 DGROUP:0391
LENGH				  Number 0018
LINE				  Near	 DGROUP:02D7
L_U_CORNER			  Number 050A
MAIN				  Near	 DGROUP:02C9
MEM_1				  Byte	 DGROUP:039C
MEM_2				  Byte	 DGROUP:039D
MEM_END				  Near	 DGROUP:039E
MEOW				  Byte	 DGROUP:0368
NEW_LINE			  Near	 DGROUP:0134
NEXT				  Near	 DGROUP:0191
POL				  Number 00CD
PRINTER				  Near	 DGROUP:018F
RAMKA				  Near	 DGROUP:0318
RAMKAPRINT			  Near	 DGROUP:0103
SENTR_LINE			  Near	 DGROUP:0148
START				  Near	 DGROUP:0100
STENA				  Number 00BA
Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 9
Symbol Table



TEXT				  Near	 DGROUP:031B
T_CREATE			  Near	 DGROUP:02A3
T_END				  Near	 DGROUP:02C2
T_START				  Near	 DGROUP:02AD
VIDEOSEG			  Number B800
YGOL_1				  Number 00C9
YGOL_2				  Number 00C8
YGOL_3				  Number 00BB
YGOL_4				  Number 00BC

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
  _TEXT				  16  039E Word	  Public  CODE
Turbo Assembler	 Version 4.1	    02/23/18 19:41:20	    Page 10
Error Summary



*Warning* asciitr.asm(16) Reserved word	used as	symbol:	HIGH
*Warning* asciitr.asm(31) Argument needs type override
*Warning* asciitr.asm(32) Argument needs type override
*Warning* asciitr.asm(37) Argument needs type override
*Warning* asciitr.asm(38) Argument needs type override
*Warning* asciitr.asm(44) Argument needs type override
*Warning* asciitr.asm(45) Argument needs type override
*Warning* asciitr.asm(51) Argument needs type override
*Warning* asciitr.asm(52) Argument needs type override
*Warning* asciitr.asm(57) Argument needs type override
*Warning* asciitr.asm(58) Argument needs type override
*Warning* asciitr.asm(66) Argument needs type override
*Warning* asciitr.asm(67) Argument needs type override
*Warning* asciitr.asm(70) Argument needs type override
*Warning* asciitr.asm(71) Argument needs type override
*Warning* asciitr.asm(76) Argument needs type override
*Warning* asciitr.asm(77) Argument needs type override
*Warning* asciitr.asm(93) Argument needs type override
*Warning* asciitr.asm(121) Argument needs type override
*Warning* asciitr.asm(126) Argument needs type override
*Warning* asciitr.asm(164) Argument needs type override
*Warning* asciitr.asm(190) Argument needs type override
*Warning* asciitr.asm(245) Argument needs type override
*Warning* asciitr.asm(274) Argument needs type override
